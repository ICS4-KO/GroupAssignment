
import java.util.ArrayList;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 * Game Settings History Screen of Settings Simulator app that allows users to see their past game settings
 * 
 * @author   Kimi Ong
 * @version  1.0
 * @since    2025-04-29
 */
public class GameSettingsHistory extends javax.swing.JFrame {
    //Define methods
    
    /**
     * This method iterates through all of the previously set settings objects (game/search engine/social media) of the currently 
     * logged in user account and adds each game settings object to the game settings history combo box
     * 
     * @param settingsArray  Instance variable of the current User object storing all of their previous setting configurations
     */
    private void setGameHistoryComboBox(ArrayList<BasicSettings> settingsArray) {
        //Clear all items in game settings history combo box before adding updated set of settings objects as items
        gameHistoryComboBox.removeAllItems(); //Clear game settings history

                
        //Iterate through each BasicSettings object in the array list of BasicSettings
        for (BasicSettings settings : settingsArray) {
            //Check if the BasicSettings object's instance type is GameSettings so that it can downcast
            if (settings instanceof GameSettings)
                //Downcast BasicSettings object to GameSettings object, add to game settings history combo box
                gameHistoryComboBox.addItem((GameSettings) settings);
        } //End for loop iterating through array list of settings objects
    }
    
    
    /**
     * Creates new form GameSettingsHistory
     */
    public GameSettingsHistory() {
        initComponents();

        //Set top label to display logged-in account's username
        usernameLabel.setText(HomeScreen.currentUser.getUsername() + "'s Game Settings History");
        
        //Set items in game history settings combo box
        setGameHistoryComboBox(HomeScreen.currentUser.getSettings());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        difficultyLabel = new javax.swing.JLabel();
        subtitlesLabel = new javax.swing.JLabel();
        resolutionLabel = new javax.swing.JLabel();
        notificationsLabel = new javax.swing.JLabel();
        controlLabel = new javax.swing.JLabel();
        locationLabel = new javax.swing.JLabel();
        graphicsLabel = new javax.swing.JLabel();
        microphoneLabel = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        gameHistoryComboBox = new javax.swing.JComboBox<>();
        returnButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        difficultyLabel.setFont(new java.awt.Font("Hiragino Sans", 0, 12)); // NOI18N
        difficultyLabel.setText("Difficulty Level:");

        subtitlesLabel.setFont(new java.awt.Font("Hiragino Sans", 0, 12)); // NOI18N
        subtitlesLabel.setText("Subtitles On:");

        resolutionLabel.setFont(new java.awt.Font("Hiragino Sans", 0, 12)); // NOI18N
        resolutionLabel.setText("Screen Resolution:");

        notificationsLabel.setFont(new java.awt.Font("Hiragino Sans", 0, 12)); // NOI18N
        notificationsLabel.setText("Notifications On:");

        controlLabel.setFont(new java.awt.Font("Hiragino Sans", 0, 12)); // NOI18N
        controlLabel.setText("Control Scheme:");

        locationLabel.setFont(new java.awt.Font("Hiragino Sans", 0, 12)); // NOI18N
        locationLabel.setText("Location On:");

        graphicsLabel.setFont(new java.awt.Font("Hiragino Sans", 0, 12)); // NOI18N
        graphicsLabel.setText("Graphics Quality:");

        microphoneLabel.setFont(new java.awt.Font("Hiragino Sans", 0, 12)); // NOI18N
        microphoneLabel.setText("Microphone On:");

        usernameLabel.setFont(new java.awt.Font("Gurmukhi MT", 0, 18)); // NOI18N
        usernameLabel.setText("User's Game Settings History");

        gameHistoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameHistoryComboBoxActionPerformed(evt);
            }
        });

        returnButton.setFont(new java.awt.Font("Hiragino Sans", 0, 12)); // NOI18N
        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(returnButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(gameHistoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(microphoneLabel)
                                .addComponent(locationLabel)
                                .addComponent(notificationsLabel)
                                .addComponent(difficultyLabel)
                                .addComponent(subtitlesLabel)
                                .addComponent(resolutionLabel)
                                .addComponent(controlLabel)
                                .addComponent(graphicsLabel))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(usernameLabel)))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(usernameLabel)
                .addGap(18, 18, 18)
                .addComponent(gameHistoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(notificationsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(locationLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(microphoneLabel)
                .addGap(32, 32, 32)
                .addComponent(difficultyLabel)
                .addGap(12, 12, 12)
                .addComponent(subtitlesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resolutionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(controlLabel)
                .addGap(12, 12, 12)
                .addComponent(graphicsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(returnButton)
                .addGap(61, 61, 61))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gameHistoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameHistoryComboBoxActionPerformed
        //Retrieve the current selected item (GameSettings object) from the combo box when the user clicks on an item
        GameSettings selectedGameSettingsVersion = (GameSettings) gameHistoryComboBox.getSelectedItem();
        
        if (selectedGameSettingsVersion != null) {
            //Display the selected GameSettings object's notifications attribute in the corresponding text field
            notificationsLabel.setText("Notifications: " + selectedGameSettingsVersion.getAllowNotifications());
            //Display the selected GameSettings object's location sharing attribute in the corresponding text field
            locationLabel.setText("Location: " + selectedGameSettingsVersion.getLocationSharing());
            //Display the selected GameSettings object's microphone access attribute in the corresponding text field
            microphoneLabel.setText("Microphone: " + selectedGameSettingsVersion.getMicrophoneAccess());

            //Display the selected GameSettings object's difficulty level attribute in the corresponding text field
            difficultyLabel.setText("Difficulty Level: " + selectedGameSettingsVersion.getDifficultyLevel());
            //Display the selected GameSettings object's subtitles enabled attribute in the corresponding text field
            subtitlesLabel.setText("Subtitles: " + selectedGameSettingsVersion.getSubtitlesEnabled());
            //Display the selected GameSettings object's screen resolution attribute in the corresponding text field
            resolutionLabel.setText("Screen Resolution: " + selectedGameSettingsVersion.getScreenResolution());
            //Display the selected GameSettings object's control scheme attribute in the corresponding text field
            controlLabel.setText("Control Scheme: " + selectedGameSettingsVersion.getControlScheme());
            //Display the selected GameSettings object's graphics quality attribute in the corresponding text field
            graphicsLabel.setText("Graphics Quality: " + selectedGameSettingsVersion.getGraphicsQuality());
        }
    }//GEN-LAST:event_gameHistoryComboBoxActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        //Return to settings screen after user finishes looking at previous game settings
        new SettingsScreen().setVisible(true); //Show settings screen frame
        this.setVisible(false); //Hide current frame (game settings history)
    }//GEN-LAST:event_returnButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameSettingsHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameSettingsHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameSettingsHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameSettingsHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameSettingsHistory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel controlLabel;
    private javax.swing.JLabel difficultyLabel;
    private javax.swing.JComboBox<GameSettings> gameHistoryComboBox;
    private javax.swing.JLabel graphicsLabel;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JLabel microphoneLabel;
    private javax.swing.JLabel notificationsLabel;
    private javax.swing.JLabel resolutionLabel;
    private javax.swing.JButton returnButton;
    private javax.swing.JLabel subtitlesLabel;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
